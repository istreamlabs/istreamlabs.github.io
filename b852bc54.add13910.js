(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{110:function(e,n,t){"use strict";t.d(n,"a",(function(){return c}));var a=t(0),s=t.n(a),i=t(125),r=t.n(i),l=t(126),o=t.n(l);function c({github:e,docs:n}){return s.a.createElement("div",{className:"shields"},s.a.createElement("a",{className:"shield",href:e},s.a.createElement(r.a,{fontSize:"small"})," GitHub"),s.a.createElement("a",{className:"shield",href:n},s.a.createElement(o.a,{fontSize:"small"})," Documentation"))}},83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return d}));var a=t(3),s=t(7),i=(t(0),t(93)),r=t(110),l={title:"Go SDK"},o={unversionedId:"sdks/golang",id:"sdks/golang",isDocsHomePage:!1,title:"Go SDK",description:"<Shields",source:"@site/docs/sdks/golang.md",slug:"/sdks/golang",permalink:"/docs/sdks/golang",editUrl:"https://github.com/istreamlabs/docs-portal/edit/main/docs/sdks/golang.md",version:"current",sidebar:"someSidebar",previous:{title:"Javascript SDK",permalink:"/docs/sdks/javascript"},next:{title:"Python SDK",permalink:"/docs/sdks/python"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Hello, Go!",id:"hello-go",children:[]},{value:"Features",id:"features",children:[{value:"Pagination",id:"pagination",children:[]},{value:"Resource Links",id:"resource-links",children:[]}]}],u={toc:c};function d(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)(r.a,{github:"https://github.com/istreamlabs/go-sdk",docs:"https://pkg.go.dev/github.com/istreamlabs/go-sdk",mdxType:"Shields"}),Object(i.b)("p",null,"This is the iStreamPlanet SDK for the Go programming language. It is generated from the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.istreamplanet.com/openapi.json"}),"iStreamPlanet OpenAPI")," with ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://openapi-generator.tech/"}),"OpenAPI Generator"),"."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"Install is optional, as Go will get the required dependencies automatically."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ go get github.com/istreamlabs/go-sdk\n")),Object(i.b)("h2",{id:"hello-go"},"Hello, Go!"),Object(i.b)("p",null,"Getting started is easy. Save the following as ",Object(i.b)("inlineCode",{parentName:"p"},"main.go")," making sure to replace the ",Object(i.b)("inlineCode",{parentName:"p"},"CLIENT_ID"),", ",Object(i.b)("inlineCode",{parentName:"p"},"CLIENT_SECRET"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"ORGANIZATION")," with your own string values."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "context"\n    "fmt"\n\n    "github.com/istreamlabs/go-sdk/isp"\n)\n\nfunc main() {\n    // Create a new API client.\n    client := isp.NewWithClientCredentials(CLIENT_ID, CLIENT_SECRET, ORGANIZATION)\n\n    // Create an empty context. You may already have a context from an incoming\n    // request and can use that instead.\n    ctx := context.Background()\n\n    // Get a list of all source summaries. Pagination is handled\n    // automatically and all source summaries are returned in one list.\n    summaries, _, err := client.SourcesApi.ListSources(ctx).Execute()\n    if err.Error() != "" {\n        panic(err)\n    }\n\n    // For each source, print out its ID and self link.\n    for _, s := range summaries {\n        fmt.Println(s.Id + " " + *s.Self)\n    }\n}\n')),Object(i.b)("p",null,"Run it and see your sources:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# Run the main file in the current directory.\n$ go run .\n")),Object(i.b)("h2",{id:"features"},"Features"),Object(i.b)("p",null,"The following features are available in the SDK."),Object(i.b)("h3",{id:"pagination"},"Pagination"),Object(i.b)("p",null,"Paginated responses (e.g. listing sources, listing channels) are automatically handled by the SDK. If you do ",Object(i.b)("strong",{parentName:"p"},"not")," want to read all pages of results this can be disabled on a per-request basis."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Disable paging for all calls that are passed this context.\nctx = context.WithValue(ctx, isp.ContextDisablePaging, true)\n\n// Make the call like normal. Only the first page of results will be returned.\n// You can manually check the response headers for additional page links.\nsummaries, resp, err := client.SourcesApi.ListSources(ctx).Execute()\n")),Object(i.b)("h3",{id:"resource-links"},"Resource Links"),Object(i.b)("p",null,"Many embedded resources in the API contain ",Object(i.b)("inlineCode",{parentName:"p"},"Self")," links to fetch more information. They are easy to use from the SDK:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Assume you have a channel loaded from somewhere else.\nvar channel isp.Channel\n\nvar source isp.Source\nresp, err := client.GetModel(*channel.Source.Self, &source)\nif err != nil {\n    panic(err)\n}\n")))}d.isMDXComponent=!0}}]);