"use strict";(self.webpackChunkdocs_portal=self.webpackChunkdocs_portal||[]).push([[763],{8433:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294),s=t(97724),r=t(56247);function i(e){var n=e.github,t=e.docs;return a.createElement("div",{className:"shields"},a.createElement("a",{className:"shield",href:n},a.createElement(s.Z,{fontSize:"small"})," GitHub"),a.createElement("a",{className:"shield",href:t},a.createElement(r.Z,{fontSize:"small"})," Documentation"))}},41591:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var a=t(83117),s=t(80102),r=(t(67294),t(3905)),i=t(8433),l=["components"],o={title:"Go SDK"},c=void 0,u={unversionedId:"sdks/golang",id:"sdks/golang",title:"Go SDK",description:"<Shields",source:"@site/docs/sdks/golang.md",sourceDirName:"sdks",slug:"/sdks/golang",permalink:"/docs/sdks/golang",editUrl:"https://github.com/istreamlabs/docs-portal/edit/main/docs/sdks/golang.md",tags:[],version:"current",frontMatter:{title:"Go SDK"},sidebar:"someSidebar",previous:{title:"Javascript SDK",permalink:"/docs/sdks/javascript"},next:{title:"Python SDK",permalink:"/docs/sdks/python"}},d=[{value:"Installation",id:"installation",children:[],level:2},{value:"Hello, Go!",id:"hello-go",children:[],level:2},{value:"Features",id:"features",children:[{value:"Pagination",id:"pagination",children:[],level:3},{value:"Resource Links",id:"resource-links",children:[],level:3}],level:2}],p={toc:d};function m(e){var n=e.components,t=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{github:"https://github.com/istreamlabs/go-sdk",docs:"https://pkg.go.dev/github.com/istreamlabs/go-sdk/isp",mdxType:"Shields"}),(0,r.kt)("p",null,"This is the iStreamPlanet SDK for the Go programming language. It is generated from the ",(0,r.kt)("a",{parentName:"p",href:"https://api.istreamplanet.com/openapi.json"},"iStreamPlanet OpenAPI")," with ",(0,r.kt)("a",{parentName:"p",href:"https://openapi-generator.tech/"},"OpenAPI Generator"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install is optional, as Go will get the required dependencies automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ go get github.com/istreamlabs/go-sdk\n")),(0,r.kt)("h2",{id:"hello-go"},"Hello, Go!"),(0,r.kt)("p",null,"Getting started is easy. Save the following as ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go")," making sure to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"CLIENT_ID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CLIENT_SECRET"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ORGANIZATION")," with your own string values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n\n    "github.com/istreamlabs/go-sdk/isp"\n)\n\nfunc main() {\n    // Create a new API client.\n    client := isp.NewWithClientCredentials(CLIENT_ID, CLIENT_SECRET, ORGANIZATION)\n\n    // Create an empty context. You may already have a context from an incoming\n    // request and can use that instead.\n    ctx := context.Background()\n\n    // Get a list of all source summaries. Pagination is handled\n    // automatically and all source summaries are returned in one list.\n    summaries, _, err := client.SourcesApi.ListSources(ctx).Execute()\n    if err.Error() != "" {\n        panic(err)\n    }\n\n    // For each source, print out its ID and self link.\n    for _, s := range summaries {\n        fmt.Println(s.Id + " " + *s.Self)\n    }\n}\n')),(0,r.kt)("p",null,"Run it and see your sources:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# Run the main file in the current directory.\n$ go run .\n")),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("p",null,"The following features are available in the SDK."),(0,r.kt)("h3",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"Paginated responses (e.g. listing sources, listing channels) are automatically handled by the SDK. If you do ",(0,r.kt)("strong",{parentName:"p"},"not")," want to read all pages of results this can be disabled on a per-request basis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Disable paging for all calls that are passed this context.\nctx = context.WithValue(ctx, isp.ContextDisablePaging, true)\n\n// Make the call like normal. Only the first page of results will be returned.\n// You can manually check the response headers for additional page links.\nsummaries, resp, err := client.SourcesApi.ListSources(ctx).Execute()\n")),(0,r.kt)("h3",{id:"resource-links"},"Resource Links"),(0,r.kt)("p",null,"Many embedded resources in the API contain ",(0,r.kt)("inlineCode",{parentName:"p"},"Self")," links to fetch more information. They are easy to use from the SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Assume you have a channel loaded from somewhere else.\nvar channel isp.Channel\n\nvar source isp.Source\nresp, err := client.GetModel(*channel.Source.Self, &source)\nif err != nil {\n    panic(err)\n}\n")))}m.isMDXComponent=!0}}]);