"use strict";(self.webpackChunkdocs_portal=self.webpackChunkdocs_portal||[]).push([[760],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},58215:function(e,n,t){var r=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},26396:function(e,n,t){t.d(n,{Z:function(){return d}});var r=t(83117),a=t(67294),l=t(72389),o=t(79443);var i=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=t(80446),u=t(86010),c="tabItem_1uMI";function p(e){var n,t,r,l=e.lazy,o=e.block,p=e.defaultValue,d=e.values,m=e.groupId,g=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:v.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),h=(0,s.lx)(f,(function(e,n){return e.value===n.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(n=null!=p?p:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=v[0])?void 0:r.props.value;if(null!==b&&!f.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=i(),k=y.tabGroupChoices,N=y.setTabGroupChoices,T=(0,a.useState)(b),E=T[0],I=T[1],O=[],x=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=k[m];null!=C&&C!==E&&f.some((function(e){return e.value===C}))&&I(C)}var w=function(e){var n=e.currentTarget,t=O.indexOf(n),r=f[t].value;r!==E&&(x(n),I(r),null!=m&&N(m,r))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=O.indexOf(e.currentTarget)+1;t=O[r]||O[0];break;case"ArrowLeft":var a=O.indexOf(e.currentTarget)-1;t=O[a]||O[O.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":o},g)},f.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,className:(0,u.Z)("tabs__item",c,{"tabs__item--active":E===n}),key:n,ref:function(e){return O.push(e)},onKeyDown:S,onFocus:w,onClick:w},null!=t?t:n)}))),l?(0,a.cloneElement)(v.filter((function(e){return e.props.value===E}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==E})}))))}function d(e){var n=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},48386:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var r=t(83117),a=t(80102),l=(t(67294),t(3905)),o=t(26396),i=t(58215),s=["components"],u={title:"Channel Operations"},c=void 0,p={unversionedId:"guide/channel-ops",id:"guide/channel-ops",title:"Channel Operations",description:"Live channel operations let you perform actions on a channel while it is running. This can be useful for live events where you might insert slate images or videos, insert program start/end signals or insert custom SCTE-35 data to be consumed by your clients.",source:"@site/docs/guide/channel-ops.mdx",sourceDirName:"guide",slug:"/guide/channel-ops",permalink:"/docs/guide/channel-ops",editUrl:"https://github.com/istreamlabs/docs-portal/edit/main/docs/guide/channel-ops.mdx",tags:[],version:"current",frontMatter:{title:"Channel Operations"},sidebar:"someSidebar",previous:{title:"Creating a Channel",permalink:"/docs/guide/create-channel"},next:{title:"Auditing Channels",permalink:"/docs/guide/auditing"}},d=[{value:"Inserting Slates",id:"inserting-slates",children:[],level:2},{value:"Starting &amp; Stopping Programs",id:"starting--stopping-programs",children:[],level:2},{value:"Arbitrary Signaling",id:"arbitrary-signaling",children:[],level:2}],m={toc:d};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Live channel operations let you perform actions on a channel while it is running. This can be useful for live events where you might insert slate images or videos, insert program start/end signals or insert custom ",(0,l.kt)("abbr",{title:"Society of Cable Telecommunications Engineers"},"SCTE"),"-35 data to be consumed by your clients."),(0,l.kt)("h2",{id:"inserting-slates"},"Inserting Slates"),(0,l.kt)("p",null,"Slates are images or short videos that get overlayed to hide the input source video on the live stream. You pass the URI when slating in or out."),(0,l.kt)(o.Z,{groupId:"client",defaultValue:"cli",values:[{label:"CLI",value:"cli"},{label:"Javascript",value:"js"},{label:"Go",value:"go"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Show the slate\n$ restish isp slate-in $CHANNEL_ID uri: https://example.com/slate.jpg\n\n# Return to the input source video\n$ restish isp slate-out $CHANNEL_ID\n"))),(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// TODO\n"))),(0,l.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'request := client.ChannelOperationsApi.SlateIn(context.Background(), "CHANNEL_ID")\nrequest.Slate(isp.Slate{\n  Uri: "https://example.com/slate.jpg",\n})\n_, err := request.Execute()\n\nif err.Error() != "" {\n  panic(err)\n}\n')),(0,l.kt)("p",null,"And then remove the slate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'request := client.ChannelOperationsApi.SlateOut(context.Background(), "CHANNEL_ID")\n_, err := request.Execute()\n\nif err.Error() != "" {\n  panic(err)\n}\n')))),(0,l.kt)("h2",{id:"starting--stopping-programs"},"Starting & Stopping Programs"),(0,l.kt)("p",null,"Program start and stop signals provide a way to tell video players when a logically distinct piece of content has started and stopped, such as a live sporting event. Each program has a unique event ID so that multiple overlapping programs are supported."),(0,l.kt)(o.Z,{groupId:"client",defaultValue:"cli",values:[{label:"CLI",value:"cli"},{label:"Javascript",value:"js"},{label:"Go",value:"go"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Insert program start\n$ restish isp program-start $CHANNEL_ID event_id: 1\n\n# End a program\n$ restish isp program-stop $CHANNEL_ID event_id: 1\n"))),(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// TODO\n"))),(0,l.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'request := client.ChannelOperationsApi.ProgramStart(context.Background(), "CHANNEL_ID")\nrequest.ProgramSignal(isp.ProgramSignal{\n  EventId: 1,\n})\n_, err := request.Execute()\n\nif err.Error() != "" {\n  panic(err)\n}\n')),(0,l.kt)("p",null,"And then stop the same program:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'request := client.ChannelOperationsApi.ProgramEnd(context.Background(), "CHANNEL_ID")\nrequest.ProgramSignal(isp.ProgramSignal{\n  EventId: 1,\n})\n_, err := request.Execute()\n\nif err.Error() != "" {\n  panic(err)\n}\n')))),(0,l.kt)("h2",{id:"arbitrary-signaling"},"Arbitrary Signaling"),(0,l.kt)("p",null,"Arbitrary out-of-band signaling is supported, allowing you to send any custom data into the stream. The slate and program functionality above is just a convenience layer on the signaling API."),(0,l.kt)(o.Z,{groupId:"client",defaultValue:"cli",values:[{label:"CLI",value:"cli"},{label:"Javascript",value:"js"},{label:"Go",value:"go"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"cli",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Insert a program start signal\n$ restish isp signal $CHANNEL_ID segment_type: program, signal_type: start, event_id: 1\n"))),(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// TODO\n"))),(0,l.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'request := client.ChannelOperationsApi.Signal(context.Background(), "CHANNEL_ID")\nrequest.GenericSignal([]isp.GenericSignal{\n  {\n    SegmentType: "program",\n    SignalType: "start",\n    EventId: 1\n  }\n})\n_, err := request.Execute()\n\nif err.Error() != "" {\n  panic(err)\n}\n')))))}g.isMDXComponent=!0}}]);