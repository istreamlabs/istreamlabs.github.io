"use strict";(self.webpackChunkdocs_portal=self.webpackChunkdocs_portal||[]).push([[41],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,m=d["".concat(o,".").concat(h)]||d[h]||p[h]||i;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},26396:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(83117),r=n(67294),i=n(72389),l=n(79443);var s=function(){var e=(0,r.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(80446),u=n(86010),c="tabItem_1uMI";function p(e){var t,n,a,i=e.lazy,l=e.block,p=e.defaultValue,d=e.values,h=e.groupId,m=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),v=(0,o.lx)(g,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(t=null!=p?p:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=f[0])?void 0:a.props.value;if(null!==b&&!g.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),y=k.tabGroupChoices,w=k.setTabGroupChoices,N=(0,r.useState)(b),I=N[0],P=N[1],x=[],O=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var C=y[h];null!=C&&C!==I&&g.some((function(e){return e.value===C}))&&P(C)}var T=function(e){var t=e.currentTarget,n=x.indexOf(t),a=g[n].value;a!==I&&(O(t),P(a),null!=h&&w(h,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;n=x[a]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;n=x[r]||x[x.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":l},m)},g.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,className:(0,u.Z)("tabs__item",c,{"tabs__item--active":I===t}),key:t,ref:function(e){return x.push(e)},onKeyDown:E,onFocus:T,onClick:T},null!=n?n:t)}))),i?(0,r.cloneElement)(f.filter((function(e){return e.props.value===I}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}function d(e){var t=(0,i.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},53298:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return h},default:function(){return f}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),l=n(26396),s=n(58215),o=n(10412),u=["components"],c={id:"cli",title:"Download the iStreamPlanet CLI",sidebar_label:"Download CLI"},p=void 0,d={unversionedId:"cli",id:"cli",title:"Download the iStreamPlanet CLI",description:"iStreamPlanet's APIs implement OpenAPI 3 descriptions which are publicly linked via RFC 8631 service-desc link relation headers and provide auto-discovery for CLI configuration via the x-cli-config extension. This means you can use any client which understands these features to interact with our APIs.",source:"@site/docs/cli.mdx",sourceDirName:".",slug:"/cli",permalink:"/docs/cli",editUrl:"https://github.com/istreamlabs/docs-portal/edit/main/docs/cli.mdx",tags:[],version:"current",frontMatter:{id:"cli",title:"Download the iStreamPlanet CLI",sidebar_label:"Download CLI"},sidebar:"someSidebar",previous:{title:"Streaming API",permalink:"/docs/reference/streaming"},next:{title:"Javascript SDK",permalink:"/docs/sdks/javascript"}},h=[{value:"Installation",id:"installation",children:[],level:2},{value:"Configuration",id:"configuration",children:[],level:2},{value:"Example Usage",id:"example-usage",children:[{value:"Getting Information",id:"getting-information",children:[{value:"Filtering Data",id:"filtering-data",children:[],level:4}],level:3},{value:"Writing Data",id:"writing-data",children:[],level:3}],level:2}],m={toc:h};function f(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"iStreamPlanet's APIs implement OpenAPI 3 descriptions which are publicly linked via ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc8631"},"RFC 8631")," ",(0,i.kt)("inlineCode",{parentName:"p"},"service-desc")," link relation headers and provide auto-discovery for ",(0,i.kt)("a",{parentName:"p",href:"https://rest.sh/#/openapi?id=autoconfiguration"},"CLI configuration")," via the ",(0,i.kt)("inlineCode",{parentName:"p"},"x-cli-config")," extension. This means you can use any client which understands these features to interact with our APIs."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"We recommend getting started with ",(0,i.kt)("a",{parentName:"p",href:"https://rest.sh/"},"Restish"),", a simple cURL-like commandline client for REST-ish APIs. Commands are generated at runtime based on our latest published OpenAPI, so you always have access to the latest API features automatically."),(0,i.kt)("p",null,"Getting started is easy:"),(0,i.kt)(l.Z,{defaultValue:function(){if(o.Z.canUseDOM){var e=navigator.platform.toLowerCase();if(e.includes("linux"))return"linux";if(e.includes("win"))return"win"}return"mac"}(),values:[{label:"macOS",value:"mac"},{label:"Windows",value:"win"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"mac",mdxType:"TabItem"},(0,i.kt)("p",null,"First, make sure you have ",(0,i.kt)("a",{parentName:"p",href:"https://brew.sh/"},"Homebrew")," installed. After that, installing or upgrading Restish is a breeze:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install Restish\n$ brew tap danielgtaylor/restish && brew install restish\n\n# Upgrade Restish to latest release\n$ brew upgrade restish\n")),(0,i.kt)("p",null,"Prefer not to use Homebrew? Then ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/danielgtaylor/restish/releases/latest"},"manually download a release"),".")),(0,i.kt)(s.Z,{value:"win",mdxType:"TabItem"},(0,i.kt)("p",null,"Head over and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/danielgtaylor/restish/releases/latest"},"manually download a release"),". Unzip the executable somewhere and you are good to go!")),(0,i.kt)(s.Z,{value:"linux",mdxType:"TabItem"},(0,i.kt)("p",null,"If you have ",(0,i.kt)("a",{parentName:"p",href:"https://brew.sh/"},"Homebrew")," then installing or upgrading Restish is a breeze:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install Restish\n$ brew tap danielgtaylor/restish && brew install restish\n\n# Upgrade Restish to latest release\n$ brew upgrade restish\n")),(0,i.kt)("p",null,"Prefer not to use Homebrew? Then ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/danielgtaylor/restish/releases/latest"},"manually download a release")," or use ",(0,i.kt)("inlineCode",{parentName:"p"},"go get")," if you have the Go compiler installed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"// Download, build & install.\n$ go get -u github.com/danielgtaylor/restish\n")))),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Once installed you need to configure Restish to talk to the iStreamPlanet API. We will use ",(0,i.kt)("inlineCode",{parentName:"p"},"isp")," as the shorthand name for the iStreamPlanet Streaming APIs. You will be prompted for your organization ID when setting up auth. Once done, select ",(0,i.kt)("inlineCode",{parentName:"p"},"Save and quit"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Configure Restish to talk to iStreamPlanet.\n$ restish api configure isp https://api.istreamplanet.com\n\n? Organization ID [? for help] YOUR_VALUE_HERE\n? Select option  [Use arrows to move, type to filter]\n  Change base URI (https://api.istreamplanet.com)\n  Add profile\n  Edit profile default\n> Save and exit\n")),(0,i.kt)("p",null,"Restish supports multiple profiles, which can be set up via the interactive configuration prompt above or by copying & editing in ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.restish/apis.json"),". Once configured, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"-p")," to reference the profile, for example ",(0,i.kt)("inlineCode",{parentName:"p"},"restish isp -p PROFILE_NAME list-channels"),"."),(0,i.kt)("h2",{id:"example-usage"},"Example Usage"),(0,i.kt)("p",null,"Commands and help are generated on the fly from the server-provided OpenAPI document. Help commands let you see what is available and how to use it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Get a list of all available commands.\n$ restish isp --help\n\n# See help for creating/updating a channel.\n$ restish isp put-channel --help\n")),(0,i.kt)("h3",{id:"getting-information"},"Getting Information"),(0,i.kt)("p",null,"Read calls are fairly straightforward and take optional filtering parameters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Get a list of sources you have access to.\n$ restish isp list-sources\n\n# Get a list of your channels.\n$ restish isp list-channels\n")),(0,i.kt)("p",null,"Lists of items like sources and channels are generally paginated. By default, Restish will make as many requests as needed to get all pages of data before returning. This behavior can be disabled to get a single page, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Disable auto-pagination, and return up to 5 items from the first page.\n$ restish isp list-channels --rsh-no-paginate --page-size=5\n")),(0,i.kt)("p",null,"Restish is smart about which URIs require authentication by matching them to pre-configured API base URIs, so you can also directly access links you find in responses. For example, you might see something like this returned when listing channels and want to get additional details:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Get details from a channel by link.\n$ restish https://api.istreamplanet.com/v2/channels/my-channel-id\n")),(0,i.kt)("h4",{id:"filtering-data"},"Filtering Data"),(0,i.kt)("p",null,"Restish supports client-side ",(0,i.kt)("a",{parentName:"p",href:"https://rest.sh/#/output?id=filtering-amp-projection"},"filtering & projection")," of response data, making it easier to get just the information you need from the API. Filtering uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"-f")," shorthand function which accepts a JMESPath expression to run against an ",(0,i.kt)("a",{parentName:"p",href:"https://rest.sh/#/output?id=response-structure"},"object that looks like"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "proto": "HTTP/2.0",\n  "status": 200,\n  "headers": {\n    "Header-Name": "header value"\n  },\n  "links": {\n    "link-name": [\n      {\n        "rel": "link-name",\n        "uri": "https://link.url/..."\n      }\n    ]\n  },\n  "body": {\n    // Body is here\n  }\n}\n')),(0,i.kt)("p",null,"Some examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Get just the channel ID and name for all channels:\n$ restish isp list-channels -f 'body[].{id, name}'\n\n# Get a raw list of channel IDs that start with \"test\":\n$ restish isp list-channels -f 'body[?starts_with(@.id, `\"test\"`)]'.id -r\n\n# Get the ETag (content version) of a channel:\n$ restish isp get-channel my-channel -f `headers.Etag` -r\n\n# Get all HD encodings for a channel:\n$ restish isp get-channel my-channel -f 'body.transcode.video_encoders[?height >= `720`].{id, width, height, bit_rate}'\n")),(0,i.kt)("p",null,"Note that enabling filtering will also enable JSON output mode."),(0,i.kt)("h3",{id:"writing-data"},"Writing Data"),(0,i.kt)("p",null,"Write calls take input in one of two ways: JSON passed in via stdin or a custom ",(0,i.kt)("a",{parentName:"p",href:"https://rest.sh/#/shorthand"},"CLI shorthand syntax")," on the commandline."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Pass JSON via stdin.\n$ echo \'{"name": "My Test Channel", "ingest": {"source": {"id": "s-abc123"}}}\' >input.json\n$ restish isp put-channel my-channel-id <input.json\n\n# Pass data on the commandline via shorthand.\n$ restish isp put-channel my-channel-id name: My Test Channel, ingest.source.id: s-abc123, ...\n')),(0,i.kt)("p",null,"Read the ",(0,i.kt)("a",{parentName:"p",href:"https://rest.sh/"},"Restish documentation")," for more in-depth CLI info and check out our ",(0,i.kt)("a",{parentName:"p",href:"/docs/guide/"},"Guide")," and API reference for examples that show you how to use the iStreamPlanet APIs."))}f.isMDXComponent=!0}}]);